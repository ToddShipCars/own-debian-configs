# Normal aliases
alias f='find |grep'
alias c="clear"
alias gvim='gvim -geom 82x35'
alias ..='cd ..'
alias ppp-on='sudo /usr/sbin/ppp-on'
alias ppp-off='sudo /usr/sbin/ppp-off'
alias firestarter='sudo su -c firestarter'
alias hist="grep '$1' /home/idachev/.histfile"
alias irssi="irssi -c irc.freenode.net -n yyz"
alias mem="free -m"
alias psg="ps ax | grep"
alias gvim="gvim -geom 132x42"
alias rh='echo '\''cleanup from hist:'\'';sed -n -e '\''${x;1!p;};h'\'' ~/.histfile;sed -i '\''$d'\'' ~/.histfile'

# Archives
alias tarcpz="tar c --use-compress-program=pigz -f"
alias tarxpz="tar x --use-compress-program=pigz -f"

# Interactive operation...
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# Default to human readable figures
alias df='df -h'
alias du='du -h'
alias ncdu='ncdu -q'

# Misc :)
alias less='less -r'                          # raw control characters
alias whence='type -a'                        # where, of a sort
alias grep='grep --color'
alias egrep='egrep --color'
alias fgrep='fgrep --color'

# Different directory listings
alias ls='ls -hF --color=tty --group-directories-first'
alias ll='ls -l'
alias la='ls -a'
alias lc='ls -C'
alias l='ls -al'
alias lla='l'
alias lsd='ls -ld *(-/DN)'
alias lsa='ls -ld .*'
alias ltr='l -tr'
alias lt='l -t'

# Git related
alias gitka='gitk --all'
alias gitga='gitg --all'
alias g='git'
alias gcam='git ci -am'
alias gk='gitk'
alias gka='gitk --all'

# Extended man viewer
#alias man='pinfo -m'

# For easy start with nice/ionice
alias n19='nice -n 19'
alias n10='nice -n 10'
alias in7='ionice -c2 -n7'
alias in4='ionice -c2 -n4'
alias in0='ionice -c2 -n0'

alias tail='tail -f -n +0'

alias exit-force='"exit"'
alias exit='echo "Please confirm with(y/n): ";read ans;if [ "$ans" = "y" ];then exit;fi'

# Quick working with screens
alias s1open='screen -d -R -S s1'
alias s2open='screen -d -R -S s2'
alias s3open='screen -d -R -S s3'

# Docker

dkrp() {
  docker ps -a $*
}

dkrn() {
  docker ps --format "{{.Names}}" $*
}

dkrr() {
  docker ps
}

dkrl() {
  docker logs -f $*
}

dkre() {
  docker exec -it $*
}

dkrb() {
  docker exec -it $1 bash
}

dkrm() {
  for i in $*; do
    docker stop $i; docker rm $i
  done
}

dkrmi() {
  docker images --format "{{.Repository}}:{{.Tag}}" --filter=reference="${1}" | xargs docker rmi -f
  docker images
}

alias dkrm-old='docker ps --filter "status=exited" | awk '\''{print $1}'\'' | xargs --no-run-if-empty docker rm'

# Misc

alias tmux="tmux -2"

alias ktmux='ps ax | grep tmux | awk '\''{ print $1 }'\'' | xargs kill'

alias prettyjson='python -m json.tool'

alias pssh='psg ssh'

alias assume-role='source aws_assume_role.sh $@'

# AWS Profiles

aspl() {
    [[ -r "${AWS_CONFIG_FILE:-$HOME/.aws/config}" ]] || return 1

    grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn} \
      '\[profile' "${AWS_CONFIG_FILE:-$HOME/.aws/config}" | \
      sed -e 's/.*profile \([a-zA-Z0-9_\.-]*\).*/\1/'
}

asp() {
    if [[ -z "$1" ]]; then
        unset AWS_DEFAULT_PROFILE AWS_PROFILE AWS_EB_PROFILE
        echo -e "AWS profile cleared."
        return
    fi

    local available_profiles=($(aspl))
    if [[ -z "${available_profiles[(r)$1]}" ]]; then
        echo "${fg[red]}Profile '$1' not found in '${AWS_CONFIG_FILE:-$HOME/.aws/config}'" >&2
        echo "Available profiles: ${(j:, :)available_profiles:-no profiles found}${reset_color}" >&2
        return 1
    fi

    export AWS_DEFAULT_PROFILE=$1
    export AWS_PROFILE=$1
    export AWS_EB_PROFILE=$1
}

alias aws-unset-session='unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN'

alias awsv='aws-vault list'

awsvl() {
  if [[ -z "$1" ]]; then
    echo -e "Expect a AWS profile check aws-vault list"
    return
  fi

  local url=$(aws-vault login $1 --stdout)

  "${BROWSER}" "https://signin.aws.amazon.com/oauth?Action=logout"

  sleep 1

  "${BROWSER}" "${url}"
}

awsvlp() {
  if [[ -z "$1" ]]; then
    echo -e "Expect a AWS profile check aws-vault list"
    return
  fi

  local url=$(aws-vault login $1 --stdout)

  "${BROWSER}" -incognito "https://signin.aws.amazon.com/oauth?Action=logout"

  sleep 1

  "${BROWSER}" -incognito "${url}"
}

awsvep() {
  if [[ -z "$1" ]]; then
    echo -e "Expect a AWS profile check aws-vault list"
    return
  fi

  aws-vault exec "$1" -- env | grep '^AWS_'
}

awsve() {
  if [[ -z "$1" ]]; then
    echo -e "Expect a AWS profile check aws-vault list"
    return
  fi

  aws-vault exec "$1" -- env | grep '^AWS_' | while read line; do echo export "$line"; done
}

# Kubectl

alias k=kubectl

alias kg='k get'
alias kgs='kg services'
alias kgp='kg pods'
alias kgpw='kg pods -o wide'
alias kgd='kg deployments'
alias kga='kg all'
alias kgst='kg statefulset'
alias kgn='kg namespace'

alias kd='k describe'
alias kds='kd service'
alias kdp='kd pod'

alias kpf='k port-forward'

alias kl='k logs -f'

alias kdel='k delete'

alias krun-busybox='k run curl --image=radial/busyboxplus:curl -i --tty'

keb() {
  kubectl exec -ti "${1}" -- bash
}

kes() {
  kubectl exec -ti "${1}" -- sh
}

kec() {
  POD_NAME=${1}
  shift
  kubectl exec "${POD_NAME}" -- $*
}

if [ "$0" = "bash" ]; then
  echo "I'm in bash"
  complete -F __start_kubectl k
fi

ksn() {
  kubectl config set-context --current --namespace=$1
}

# Helm

alias helm_2_15_0="docker run -it --rm \
  -v $(pwd):/apps \
  -v ~/.kube/config:/root/.kube/config \
  -v ~/.helm:/root/.helm alpine/helm:2.15.0"

alias kafkacat-dc="docker run -it --rm \
  --network host \
  confluentinc/cp-kafkacat \
  kafkacat"

